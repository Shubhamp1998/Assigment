// CREATING NEW DATABASE
	use mongo_practice
    show collections

// CREATING COLLECTION
    use mongo_practice
	db.CreateCollections("movies")

// INSERT DOCUMENT TO MOVIES
	db.movies.insertMany([
    { 
    "title":"Fight Club", 
    "writer":"Chuck Palahniuko", 
    "year": 1999, 
    "actors": [ "Brad Pitt", "Edward Norton"]
    }, 
    { 
    "title":"Pulp Fiction", 
    "writer":"Quentin Tarantino", 
    "year": 1994, 
    "actors": [ "John Travolta", "Uma Thurman"]
    },
    { 
    "title":"Inglorious Basterds", 
    "writer":"Quentin Tarantino", 
    "year": 2009, 
    "actors": [ "Brad Pitt", "Diane Kruger", "Eli Roth"]
    }, 
    { 
    "title":"The Hobbit: An Unexpected Journey", 
    "writer":"J.R.R.Tolkein", 
    "year":2012, 
    "franchise":"The Hobbit" 
    }, 
    { 
    "title":"The Hobbit: The Desolation of Smaug", 
    "writer":"J.R.R.Tolkein", 
    "year": 2012, 
    "franchise":"The Hobbit", 
    "synopsis":"Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness." 
    }, 
    {
    "title":"Pee Wee Herman's Big Adventure" 
    }, 
    {
    "title":"Avatar" 
    }
    ])

// FIND DOCUMENTS
// 1.	Get All Docs
    use mongo_practice
    db.movies.find().pretty()

// 2.	Get All Doc With Writer ‘Quentin Tarantino’
    db.movies.find({writer: "Quentin Tarantino"})

// 3.	Get All Doc which Actor Includes ‘Brad Pitt’
    db.movies.find({"actors": "Brad Pitt"})

// 4.	Get All Doc with franchise set to ‘The Hobbit’
    db.movies.find({"franchise": "The Hobbit"})


// 5.	Get All movies released in 90s
    db.movies.find({"year":{$gte:1988,$lt:2000}})


// 6.	Get All movies released before the year 2000 and after year 2010
    db.movies.find({"year": {$lt:2000}, $or:{$gt:2010}}).pretty()

// UPDATE DOCUMENT
// 1.	Add Synopsis to "The Hobbit: An Unexpected Journey"
    db.movies.update({ title: 'The Hobbit: An Unexpected Journey' }, 
    { 
    $set: {"synopsis": "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." 
    }
    })

2.	Add Synopsis to "The Hobbit: The Desolation of Smaug"
    db.movies.update({"title": "The Hobbit: The Desolation of Smaug"},
    {
    $set:{"synopsis": "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
    }
    })
	
// 3.	Add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
(Without deleting Earlier Array object New Object is added by Using $push Command)
	db.movies.update({"title": "Pulp Fiction" },
    {
    $push: {"actors": "Samuel L. Jackson"} 
    });



// TEXT SEARCH (To search a particular word we have to create index)
    db.movies.createIndex({"synopsis": "text"})

// 1.	Find all movies which Synopsis content word “Bilbo”
    db.movies.find({$text:{$search: "Bilbo"}})

// 2.	Find all movies which Synopsis content word “Gandalf”
    db.movies.find({$text:{$search: "Gandalf"}})

// 3.	Find all movies which Synopsis content word "Bilbo" and not "Gandalf"
    db.movies.find({$text: {$search: "Bilbo -Gandalf"}})

// 4.	find all movies that have a synopsis that contains the word "dwarves" or "hobbit" 
    db.movies.find({$text: {$search: "dwarves hobbit"}}) 

// 5.	find all movies that have a synopsis that contains the word "gold" and "dragon" 
    db.movies.find({$text: {$search: "gold dragon"}})


// DELETE DOCUMENT
// 1.	Delete the Movie "Pee Wee Harman’s Big Adventure"
    db.movies.remove({"title": "Pee Wee Harman’s Big Adventure"})

// 2.	Delete The Movie “Avatar”
    db.movies.remove({"title": "Avatar"})

// RELATIONSHIP
// 1.	Create Collection Named “users”
    db.createCollection(‘users’)

// Insert Documents

// 2.	Create Collection Named “posts”

    db.createCollection(‘posts)

// Insert Documents


// 3.	Create Collection Named “comments”

    db.createCollection(‘comments)

// Insert Documents

// QUERYING RELATED TO COLLECTIONS
// 1.	Find All Users
    db.users.find().pretty()

// 2.	Find All Posts
    db.posts.find().pretty()

// 3.	Find All Post that was Authored by "GoodGuyGreg"
    db.posts.find({"username": "GoodGuyGreg"}).pretty()

// 4.	Find All Post that was Authored by "ScumbagSteve"
    db.posts.find({“username”: "ScumbagSteve"}).pretty()

// 5.	Find All Comments
    db.comments.find().pretty()

// 6.	Find All Comments that was Authored by "GoodGuyGreg"
    db.comments.find({"username": "GoodGuyGreg"}).pretty()

// 7.	Find All Comments that was Authored by "ScumbagSteve"
    db.comments.find({"username": "ScumbagSteve"}).pretty()

// 8.	Find All Comments Belonging to the Post “Reports a bug in your code”
	db.posts.aggregate([{ $match: { title: 'Reports a bug in your code' } },
    {
    $lookup: { from: 'comments', 
    localField: '_id', 
    foreignField: 'post', 
    as: 'comments' 
    }
    }]).pretty();
